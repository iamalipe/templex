// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Genre {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  originYear       String?
  description      String?
  popularInCountry String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  songsIDs String[] @db.ObjectId
  songs    Song[]   @relation(fields: [songsIDs], references: [id])
}

model Artist {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  titleName    String
  email        String   @unique
  profileImage String
  bio          String
  nationality  String
  dob          DateTime
  phoneNo      String
  specialty    String

  songsIDs String[] @db.ObjectId
  songs    Song[]   @relation(fields: [songsIDs], references: [id])
  albums   Album[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  titleImage  String
  releaseDate DateTime
  duration    Int // duration in seconds

  artistIDs String[] @db.ObjectId
  artists   Artist[] @relation(fields: [artistIDs], references: [id])

  genreIDs String[] @db.ObjectId
  genres   Genre[]  @relation(fields: [genreIDs], references: [id])

  albumId String @db.ObjectId
  albums  Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  playlistIDs String[]   @db.ObjectId
  playlists   Playlist[] @relation(fields: [playlistIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  titleImage  String
  releaseDate DateTime

  artistId String @db.ObjectId
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  songs Song[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  songIDs String[] @db.ObjectId
  songs   Song[]   @relation(fields: [songIDs], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
